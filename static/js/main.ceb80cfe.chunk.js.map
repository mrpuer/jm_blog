{"version":3,"sources":["reducers/userReducer.js","schemas/schemas.js","components/CreateAntField.jsx","components/DisplayRegisterForm.jsx","actions/actionsCreator.js","services/RealworldService.js","components/RegisterForm.jsx","pages/Register.jsx","components/UserHomePage.jsx","pages/User.jsx","components/DisplayLoginForm.jsx","components/LoginForm.jsx","pages/Login.jsx","components/MainMenu.jsx","components/AppHeader.jsx","components/AppFooter.jsx","components/App.jsx","serviceWorker.js","index.jsx"],"names":["initState","user","isLogged","userReducer","handleActions","USER_LOGIN_SUCCESS","state","payload","USER_REGISTER_SUCCESS","newUser","USER_LOGOUT","message","success","loginSchema","yup","shape","email","required","password","registerSchema","matches","passwordRepeat","oneOf","username","min","max","bio","image","url","CreateAntField","AntComponent","field","form","hasFeedback","label","submitCount","type","props","touched","name","submitted","hasError","errors","submittedError","touchedError","Item","help","validateStatus","onBlur","setFieldTouched","onChange","value","target","setFieldValue","AntInput","Input","AntInputPassword","Password","DisplayRegisterForm","data","isSubmitting","className","component","htmlType","disabled","defaultProps","service","register","a","axios","post","login","loginData","defaults","baseURL","headers","ContentType","userRegisterRequest","createAction","userRegisterSuccess","userLoginSuccess","userLogout","initialValues","dispatchProps","registerHandler","formData","dispatch","connect","validationSchema","onSubmit","values","setSubmitting","then","catch","response","Modal","error","title","content","Object","keys","map","key","join","Register","path","render","to","pathname","User","DisplayLoginForm","mapDispatch","loginHandler","Login","exact","MainMenu","handleLogout","theme","mode","defaultSelectedKeys","onClick","Header","Layout","AppHeader","Footer","AppFooter","style","textAlign","Content","store","createStore","composeWithDevTools","applyMiddleware","thunk","App","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ceb80cfe.chunk.js","sourcesContent":["import { handleActions } from 'redux-actions';\nimport { message } from 'antd';\n\nconst initState = {\n  user: {},\n  isLogged: false,\n};\n\nconst userReducer = handleActions(\n  {\n    // USER_LOGIN_REQUEST: (state, { payload }) => {},\n    USER_LOGIN_SUCCESS: (state, { payload }) => {\n      return { user: payload.user, isLogged: true };\n    },\n    // USER_LOGIN_FAILURE: (state, { payload }) => {},\n    // USER_REGISTER_REQUEST: (state, { payload }) => {},\n    USER_REGISTER_SUCCESS: (state, { payload }) => ({\n      user: payload.newUser,\n      isLogged: true,\n    }),\n    // USER_REGISTER_FAILURE: (state, { payload }) => {},\n    USER_LOGOUT: () => {\n      message.success('Logout successful!');\n      return initState;\n    },\n  },\n  initState\n);\n\nexport default userReducer;\n","import * as yup from 'yup';\n\nexport const loginSchema = yup.object().shape({\n  email: yup\n    .string()\n    .email('Incorrect email address')\n    .required('Email is required field'),\n  password: yup.string().required('You need type your password'),\n});\n\nexport const registerSchema = yup.object().shape({\n  email: yup\n    .string()\n    .email('Invalid email address')\n    .required('Email is required field'),\n  password: yup\n    .string()\n    .required('Password is required field')\n    .matches(\n      /^(?=^.{8,40}$)((?=.*\\d)|(?=.*\\W+))(?![.\\n])(?=.*[A-Z]).*$/,\n      'Password must contains 8-40 latin symbols, one on upper case, and one digit'\n    ),\n  passwordRepeat: yup.string().oneOf([yup.ref('password'), null], 'Password must match'),\n  username: yup\n    .string()\n    .required('Username is required field')\n    .min(3, 'Username must contains more that 3 symbols')\n    .max(50, 'Username must contains less that 50 symbols'),\n  bio: yup.string(),\n  image: yup.string().url('Image URL incorrect'),\n});\n","import React from 'react';\nimport { Input, Form } from 'antd';\n\nconst CreateAntField = AntComponent => ({\n  field,\n  form,\n  hasFeedback,\n  label,\n  submitCount,\n  type,\n  ...props\n}) => {\n  const touched = form.touched[field.name];\n  const submitted = submitCount > 0;\n  const hasError = form.errors[field.name];\n  const submittedError = hasError && submitted;\n  const touchedError = hasError && touched;\n  const onBlur = () => form.setFieldTouched(field.name, true);\n  const onInputChange = ({ target: { value } }) => form.setFieldValue(field.name, value);\n  const onChange = value => form.setFieldValue(field.name, value);\n  return (\n    <Form.Item\n      label={label}\n      hasFeedback={(hasFeedback && submitted) || (hasFeedback && touched)}\n      help={submittedError || touchedError ? hasError : false}\n      validateStatus={submittedError || touchedError ? 'error' : 'success'}\n    >\n      <AntComponent\n        {...field}\n        {...props}\n        onBlur={onBlur}\n        onChange={type ? onInputChange : onChange}\n      />\n    </Form.Item>\n  );\n};\n\nexport const AntInput = CreateAntField(Input);\nexport const AntInputPassword = CreateAntField(Input.Password);\n","import React from 'react';\nimport { Form, Field } from 'formik';\nimport { Button, Form as AntForm } from 'antd';\nimport PropTypes from 'prop-types';\nimport { AntInput, AntInputPassword } from './CreateAntField';\n\nconst DisplayRegisterForm = ({ data }) => {\n  const { submitCount, isSubmitting } = data;\n  return (\n    <Form className=\"form\">\n      <Field\n        name=\"username\"\n        type=\"text\"\n        label=\"Username\"\n        component={AntInput}\n        submitCount={submitCount}\n        hasFeedback\n      />\n      <Field\n        name=\"email\"\n        type=\"email\"\n        label=\"Email\"\n        component={AntInput}\n        submitCount={submitCount}\n        hasFeedback\n      />\n      <Field\n        name=\"password\"\n        type=\"password\"\n        label=\"Password\"\n        component={AntInputPassword}\n        submitCount={submitCount}\n        hasFeedback\n      />\n      <Field\n        name=\"passwordRepeat\"\n        type=\"password\"\n        label=\"Repeat password\"\n        component={AntInputPassword}\n        submitCount={submitCount}\n        hasFeedback\n      />\n      <AntForm.Item>\n        <Button type=\"primary\" htmlType=\"submit\" disabled={isSubmitting}>\n          Register\n        </Button>\n      </AntForm.Item>\n    </Form>\n  );\n};\n\nDisplayRegisterForm.propTypes = {\n  data: PropTypes.shape({\n    submitCount: PropTypes.number,\n    isSubmitting: PropTypes.bool,\n  }),\n};\n\nDisplayRegisterForm.defaultProps = {\n  data: {\n    submitCount: 0,\n    isSubmitting: false,\n  },\n};\n\nexport default DisplayRegisterForm;\n","import { createAction } from 'redux-actions';\nimport RealworldService from '../services/RealworldService';\n// import TestService from '../services/TestService';\n\nconst service = new RealworldService();\n// const service = new TestService();\n\nconst userRegisterRequest = createAction('USER_REGISTER_REQUEST');\nconst userRegisterSuccess = createAction('USER_REGISTER_SUCCESS');\n// const userRegisterFailure = createAction('USER_REGISTER_FAILURE');\n\n// const userLoginRequest = createAction('USER_LOGIN_REQUEST');\nconst userLoginSuccess = createAction('USER_LOGIN_SUCCESS');\n// const userLoginFailure = createAction('USER_LOGIN_FAILURE');\n\nexport const userLogout = createAction('USER_LOGOUT');\n\nexport const onRegister = formData => async dispatch => {\n  dispatch(userRegisterRequest());\n  const newUser = await service.register(formData);\n  dispatch(userRegisterSuccess({ newUser }));\n};\n\nexport const onLogin = loginData => async dispatch => {\n  const user = await service.login(loginData);\n  dispatch(userLoginSuccess({ user }));\n};\n","import axios from 'axios';\n\nconst URL = 'https://conduit.productionready.io/api/';\n\nexport default class RealworldService {\n  constructor() {\n    axios.defaults.baseURL = URL;\n    axios.defaults.headers = { ContentType: 'application/json; charset=utf-8' };\n  }\n\n  register = async newUser => {\n    const {\n      data: { user },\n    } = await axios.post('/users', { user: newUser });\n    // axios.defaults.headers.Authorization = user.token;\n    return user;\n  };\n\n  login = async loginData => {\n    const {\n      data: { user },\n    } = await axios.post('/users/login', { user: loginData });\n    // axios.defaults.headers.Authorization = user.token;\n    return user;\n  };\n}\n","import React from 'react';\nimport { Formik } from 'formik';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { message, Modal } from 'antd';\nimport { registerSchema } from '../schemas/schemas';\nimport DisplayRegisterForm from './DisplayRegisterForm';\nimport { onRegister } from '../actions/actionsCreator';\n\nconst initialValues = {\n  email: '',\n  password: '',\n  username: '',\n};\n\nconst RegisterForm = ({ registerHandler }) => {\n  return (\n    <Formik\n      initialValues={initialValues}\n      validationSchema={registerSchema}\n      onSubmit={(values, { setSubmitting }) => {\n        setSubmitting(true);\n        registerHandler(values)\n          .then(() => {\n            message.success('Register successful!');\n            setSubmitting(false);\n          })\n          .catch(({ response }) => {\n            Modal.error({\n              title: 'Register Error:',\n              content: Object.keys(response.data.errors)\n                .map(key => `${key} ${response.data.errors[key][0]}`)\n                .join('\\n'),\n            });\n            setSubmitting(false);\n          });\n      }}\n    >\n      {data => <DisplayRegisterForm data={data} />}\n    </Formik>\n  );\n};\n\nRegisterForm.propTypes = {\n  registerHandler: PropTypes.func.isRequired,\n};\n\nconst dispatchProps = {\n  registerHandler: onRegister,\n};\n\nexport default connect(null, dispatchProps)(RegisterForm);\n","import React from 'react';\nimport { Route, Redirect } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport RegisterForm from '../components/RegisterForm';\n\nconst Register = ({ isLogged }) => {\n  return (\n    <Route\n      path=\"/register\"\n      render={() => (isLogged ? <Redirect to={{ pathname: '/user' }} /> : <RegisterForm />)}\n    />\n  );\n};\n\nRegister.propTypes = {\n  isLogged: PropTypes.bool,\n};\n\nRegister.defaultProps = {\n  isLogged: false,\n};\n\nconst mapStateToProps = state => ({\n  isLogged: state.isLogged,\n});\n\nexport default connect(mapStateToProps)(Register);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\n\nconst UserHomePage = ({ user }) => {\n  return (\n    <>\n      <h2>Welcome {user.username}!</h2>\n      <div>Your email - {user.email}</div>\n    </>\n  );\n};\n\nUserHomePage.propTypes = {\n  user: PropTypes.shape({\n    email: PropTypes.string,\n    username: PropTypes.string,\n  }).isRequired,\n};\n\nconst mapStateToProps = ({ user }) => ({\n  user,\n});\n\nexport default connect(mapStateToProps)(UserHomePage);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { Route, Redirect } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport UserHomePage from '../components/UserHomePage';\n\nconst User = ({ isLogged }) => {\n  return (\n    <Route\n      path=\"/user\"\n      render={() => (isLogged ? <UserHomePage /> : <Redirect to={{ pathname: '/' }} />)}\n    />\n  );\n};\n\nUser.propTypes = {\n  isLogged: PropTypes.bool,\n};\n\nUser.defaultProps = {\n  isLogged: false,\n};\n\nconst mapStateToProps = state => ({\n  isLogged: state.isLogged,\n});\n\nexport default connect(mapStateToProps)(User);\n","import React from 'react';\nimport { Form, Field } from 'formik';\nimport { Button, Form as AntForm } from 'antd';\nimport PropTypes from 'prop-types';\nimport { AntInput, AntInputPassword } from './CreateAntField';\n\nconst DisplayLoginForm = ({ data: { submitCount, isSubmitting } }) => {\n  return (\n    <Form className=\"form\">\n      <Field\n        name=\"email\"\n        type=\"email\"\n        label=\"Email\"\n        component={AntInput}\n        submitCount={submitCount}\n        hasFeedback\n      />\n      <Field\n        name=\"password\"\n        type=\"password\"\n        label=\"Password\"\n        component={AntInputPassword}\n        submitCount={submitCount}\n        hasFeedback\n      />\n      <AntForm.Item>\n        <Button type=\"primary\" htmlType=\"submit\" disabled={isSubmitting}>\n          Login\n        </Button>\n      </AntForm.Item>\n    </Form>\n  );\n};\n\nDisplayLoginForm.propTypes = {\n  data: PropTypes.shape({\n    submitCount: PropTypes.number,\n    isSubmitting: PropTypes.bool,\n  }),\n};\n\nDisplayLoginForm.defaultProps = {\n  data: {\n    submitCount: 0,\n    isSubmitting: false,\n  },\n};\n\nexport default DisplayLoginForm;\n","import React from 'react';\nimport { Formik } from 'formik';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { Modal, message } from 'antd';\nimport DisplayLoginForm from './DisplayLoginForm';\nimport { loginSchema } from '../schemas/schemas';\nimport { onLogin } from '../actions/actionsCreator';\n\nconst initialValues = {\n  email: '',\n  password: '',\n};\n\nconst LoginForm = ({ loginHandler }) => {\n  return (\n    <Formik\n      initialValues={initialValues}\n      validationSchema={loginSchema}\n      onSubmit={(values, { setSubmitting }) => {\n        setSubmitting(true);\n        loginHandler(values)\n          .then(() => {\n            message.success('Login successful!');\n            setSubmitting(false);\n          })\n          .catch(({ response }) => {\n            Modal.error({\n              title: 'Login Error:',\n              content: Object.keys(response.data.errors)\n                .map(key => `${key} ${response.data.errors[key][0]}`)\n                .join('\\n'),\n            });\n            setSubmitting(false);\n          });\n      }}\n    >\n      {data => <DisplayLoginForm data={data} />}\n    </Formik>\n  );\n};\n\nLoginForm.propTypes = {\n  loginHandler: PropTypes.func.isRequired,\n};\n\nconst mapDispatch = {\n  loginHandler: onLogin,\n};\n\nexport default connect(null, mapDispatch)(LoginForm);\n","import React from 'react';\nimport { Route, Redirect } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport LoginForm from '../components/LoginForm';\n\nconst Login = ({ isLogged }) => {\n  return (\n    <Route\n      path=\"/\"\n      exact\n      render={() => (isLogged ? <Redirect to={{ pathname: '/user' }} /> : <LoginForm />)}\n    />\n  );\n};\n\nLogin.propTypes = {\n  isLogged: PropTypes.bool,\n};\n\nLogin.defaultProps = {\n  isLogged: false,\n};\n\nconst mapStateToProps = state => ({\n  isLogged: state.isLogged,\n});\n\nexport default connect(mapStateToProps)(Login);\n","import React from 'react';\nimport { Menu } from 'antd';\nimport { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { userLogout } from '../actions/actionsCreator';\n\nconst MainMenu = ({ isLogged, handleLogout }) =>\n  isLogged ? (\n    <Menu className=\"menu\" theme=\"dark\" mode=\"horizontal\" defaultSelectedKeys={['1']}>\n      <Menu.Item key=\"1\" onClick={handleLogout}>\n        Logout\n      </Menu.Item>\n    </Menu>\n  ) : (\n    <Menu className=\"menu\" theme=\"dark\" mode=\"horizontal\" defaultSelectedKeys={['1']}>\n      <Menu.Item key=\"1\">\n        <Link to=\"/\">Login</Link>\n      </Menu.Item>\n      <Menu.Item key=\"2\">\n        <Link to=\"/register\">Register</Link>\n      </Menu.Item>\n    </Menu>\n  );\n\nMainMenu.propTypes = {\n  isLogged: PropTypes.bool,\n  handleLogout: PropTypes.func.isRequired,\n};\n\nMainMenu.defaultProps = {\n  isLogged: false,\n};\n\nconst mapStateToProps = state => ({\n  isLogged: state.isLogged,\n});\n\nconst mapDispatch = {\n  handleLogout: userLogout,\n};\n\nexport default connect(mapStateToProps, mapDispatch)(MainMenu);\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { Layout } from 'antd';\nimport MainMenu from './MainMenu';\n\nconst { Header } = Layout;\n\nconst AppHeader = () => {\n  return (\n    <Header>\n      <h1 className=\"logo\">\n        <Link to=\"/\">Blog</Link>\n      </h1>\n      <MainMenu />\n    </Header>\n  );\n};\n\nexport default AppHeader;\n","import React from 'react';\nimport { Layout } from 'antd';\n\nconst { Footer } = Layout;\n\nconst AppFooter = () => {\n  return (\n    <Footer style={{ textAlign: 'center' }}>Java Mentor Blog Platform ©2019 Vladimir Mytnik</Footer>\n  );\n};\n\nexport default AppFooter;\n","import React from 'react';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport { createStore, applyMiddleware } from 'redux';\nimport { Provider } from 'react-redux';\nimport thunk from 'redux-thunk';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport { Layout } from 'antd';\n\nimport userReducer from '../reducers/userReducer';\nimport { Register, User, Login } from '../pages';\nimport AppHeader from './AppHeader';\nimport AppFooter from './AppFooter';\n\nconst { Content } = Layout;\nconst store = createStore(userReducer, composeWithDevTools(applyMiddleware(thunk)));\n\nconst App = () => {\n  return (\n    <Provider store={store}>\n      <Router>\n        <Layout>\n          <AppHeader />\n          <Content className=\"main\">\n            <Login />\n            <Register />\n            <User />\n          </Content>\n          <AppFooter className=\"footer\" />\n        </Layout>\n      </Router>\n    </Provider>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport 'normalize.css';\nimport 'antd/dist/antd.css';\nimport './index.scss';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App className=\"App\" />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}